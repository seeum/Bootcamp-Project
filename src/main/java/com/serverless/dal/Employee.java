package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIgnore;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import lombok.Data;
import lombok.extern.log4j.Log4j;

@Data
@Log4j
@DynamoDBTable(tableName = "ebm-featuredev-Employees_Table")
public class Employee {


  private static DynamoDbAdapter dbAdapter;
  @DynamoDBIgnore
  private final AmazonDynamoDB client;
  @DynamoDBIgnore
  private final DynamoDBMapper mapper;

  @DynamoDBIgnore
  DynamoDBMapperConfig mapperConfig =
      DynamoDBMapperConfig.builder()
          .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride("ebm-featuredev-Employees_Table"))
          .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES)
          .build();







  @DynamoDBAttribute(attributeName = "name")
  @JsonProperty
  private String name;

  @DynamoDBAttribute(attributeName = "address")
  @JsonProperty
  private Address address;

  @DynamoDBHashKey(attributeName = "id")
  @DynamoDBAutoGeneratedKey
  private String id;






  public Employee() {

    dbAdapter = DynamoDbAdapter.getInstance();
    this.client = dbAdapter.getDbClient();
    this.mapper = dbAdapter.createDbMapper(mapperConfig);
  }





  public void save(Employee employee) {
    log.info("Products - save(): ");
    this.mapper.save(employee);
    log.info("SAVED");
  }


  public Employee get(String id) {

    Objects.requireNonNull(id);

    Employee employee = null;
    HashMap<String, AttributeValue> av = new HashMap<>();

    av.put(":Val", new AttributeValue().withS(id));
    DynamoDBQueryExpression<Employee> queryExpression =
        new DynamoDBQueryExpression<Employee>()
            .withKeyConditionExpression("id = :Val")
            .withExpressionAttributeValues(av);
    PaginatedQueryList<Employee> result = this.mapper.query(Employee.class, queryExpression);

    log.debug(result.size());
    // log.debug(result.get(0).getName());

    if (result.size() > 0) employee = result.get(0);

    return employee;
  }


  public Boolean delete(String id) {

    Objects.requireNonNull(id);

    Employee employee = get(id);

    if (employee != null) {
      this.mapper.delete(employee);
      log.debug("-----------------deleted--------------");
      return true;
    }

    return false;
  }


  public List<Employee> list() {

    DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
    List<Employee> list = this.mapper.scan(Employee.class, scanExpression);

    log.debug("-------------------------------------------");
    //log.debug(list.get(0).getName());
    log.debug("-------------------------------------------");

    return list;
  }
}
